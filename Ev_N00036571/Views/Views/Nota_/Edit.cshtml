@{ Layout = null;    var nota = (Nota)Model;}<form id="editNota" onsubmit="editar(event)" action="/Nota_/Edit" enctype="multipart/form-data" method="post">        <input id="mtxtId" type="hidden" name="Id" />    <div class="form-group">        <label>Titulo</label>        <input id="mtxtTitulo" type="text" class="form-control" name="Titulo" placeholder="Titulo"/>        @Html.ValidationMessage("Titulo")    </div>    <div class="form-group">                <textarea id="mtxtContenido" class="text" rows="10" cols="50" name="Contenido"></textarea>        @Html.ValidationMessage("Contenido")    </div>    @*<div class="form-group">        <label>Etiquetas</label>        @foreach (var item in ViewBag.Etiquetas)        {<div class="form-check form-check">    <input name="etiqueta" class="form-check-input" type="checkbox" id="inlineCheckbox1" value="@item.Id">    <label class="form-check-label" for="inlineCheckbox1">@item.Nombre</label></div>}        @Html.ValidationMessage("etiqueta")    </div>*@</form><script type='text/javascript'>    var simplemde = new SimpleMDE({        autofocus: true,        //autosave: {        //    enabled: true,        //    uniqueId: "text",        //    delay: 1000,        //},        toolbar: ["bold", "italic", "heading", "|", "quote"],        blockStyles: {            bold: "__",            italic: "_"        },        element: document.getElementByClassName("form-group .text"),        forceSync: true,        hideIcons: ["guide", "heading"],        indentWithTabs: false,        placeholder: "Escriba algo...",        insertTexts: {            horizontalRule: ["", "\n\n-----\n\n"],            image: ["![](http://", ")"],            link: ["[", "](http://)"],            table: ["", "\n\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text      | Text     |\n\n"],        },        lineWrapping: false,        parsingConfig: {            allowAtxHeaderWithoutSpace: true,            strikethrough: false,            underscoresBreakWords: true,        },        placeholder: "Escriba algo...",        previewRender: function (plainText) {            return customMarkdownParser(plainText); // Returns HTML from a custom parser        },        previewRender: function (plainText, preview) { // Async method            setTimeout(function () {                preview.innerHTML = customMarkdownParser(plainText);            }, 250);            return "Loading...";        },        promptURLs: true,        renderingConfig: {            singleLineBreaks: false,            codeSyntaxHighlighting: true,        },        shortcuts: {            drawTable: "Cmd-Alt-T"        },        showIcons: ["code", "table"],        spellChecker: false,        status: false,        status: ["autosave", "lines", "words", "cursor"], // Optional usage        status: ["autosave", "lines", "words", "cursor", {            className: "keystrokes",            defaultValue: function (el) {                this.keystrokes = 0;                el.innerHTML = "0 Keystrokes";            },            onUpdate: function (el) {                el.innerHTML = ++this.keystrokes + " Keystrokes";            }        }], // Another optional usage, with a custom status bar item that counts keystrokes        styleSelectedText: false,        tabSize: 4,        toolbarTips: false,    });</script>